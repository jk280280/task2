pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE_TAG', defaultValue: 'latest', description: 'Tag for Docker image')
        string(name: 'AWS_REGION', defaultValue: 'us-west-1', description: 'AWS region for EKS and ECR')
        string(name: 'TERRAFORM_WORKSPACE', defaultValue: 'default', description: 'Terraform workspace name')
    }

    environment {
        DOCKER_IMAGE = "026090543905.dkr.ecr.${params.AWS_REGION}.amazonaws.com/flask-app"
        AWS_REGION = 'us-west-1'
        ECR_CREDENTIALS_ID = 'ecr-credentials'
        DOCKER_IMAGE_TAG = 'latest'
        KUBECONFIG_CREDENTIALS_ID = 'eks-credentials'
        AWS_CREDENTIALS_ID = 'aws-cred'
        TERRAFORM_DIR = 'terraform'
        TERRAFORM_BIN = '/usr/local/bin/terraform'
        KUBECTL_BIN = '/usr/local/bin/kubectl'
        EKS_CLUSTER_NAME = 'task-eks-cluster'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${params.DOCKER_IMAGE_TAG}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: ECR_CREDENTIALS_ID, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                            aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
                            aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
                            aws configure set region ${AWS_REGION}
                            
                            # Authenticate Docker to ECR
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_IMAGE}
                            
                            # Push Docker image to ECR
                            docker push ${DOCKER_IMAGE}:${DOCKER_IMAGE_TAG}
                        '''
                    }
                }
            }
        }

       stage('Terraform') {
            steps {
withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred']]) {
            sh 'terraform init'
            sh 'terraform apply -auto-approve'
        }
    }
}

 stage('Deploy to EKS') {
            steps {
                script {
                    withAWS(credentials: AWS_CREDENTIALS_ID, region: AWS_REGION) {
                        // Update Kubeconfig to use the EKS cluster
                        sh '''
                        aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
                        kubectl apply -f k8s/deployment.yml
                        kubectl apply -f k8s/service.yml
                        '''
                  
                    }
                }
            }
        }
    }
post {
        always {
            sh 'docker system prune -af'
        }
    }
    triggers {
        githubPush()
    }
}
