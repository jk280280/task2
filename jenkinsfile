pipeline {
    agent any
    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPOSITORY = '026090543905.dkr.ecr.us-east-1.amazonaws.com/flask-app'
    }
    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    // Ensure Docker and AWS CLI are installed
                    sh 'docker --version'
                    sh 'aws --version'
                    
                    // Get ECR login password and log in
                    sh '''
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY
                    '''
                    
                    // Build Docker image
                    sh 'docker build -t flask-app .'
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Push Docker image to ECR
                    sh 'docker tag flask-app:latest $ECR_REPOSITORY:latest'
                    sh 'docker push $ECR_REPOSITORY:latest'
                }
            }
        }
        stage('Deploy to EKS') {
            steps {
                script {
                    // Terraform Init and Apply
                    sh '''
                    terraform init
                    terraform apply -auto-approve
                    '''
                    
                    // Deploy to EKS using kubectl (make sure kubectl is configured to use EKS)
                    sh '''
                    kubectl apply -f k8s/deployment.yaml
                    kubectl apply -f k8s/service.yaml
                    '''
                }
            }
        }
    }
    post {
        always {
            // Clean up
            sh 'docker system prune -af'
        }
    }
triggers {
        githubPush()
    }
}
