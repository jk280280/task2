pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE_TAG', defaultValue: 'latest', description: 'Tag for Docker image')
        string(name: 'AWS_REGION', defaultValue: '', description: 'AWS region for EKS and ECR')
        string(name: 'TERRAFORM_WORKSPACE', defaultValue: 'default', description: 'Terraform workspace name')
    }

    environment {
        DOCKER_IMAGE = "026090543905.dkr.ecr.${params.AWS_REGION}.amazonaws.com/flask-app"
        AWS_REGION = 'us-east-1'
        ECR_CREDENTIALS_ID = 'ecr-credentials'
        KUBECONFIG_CREDENTIALS_ID = 'eks-kubeconfig'
        AWS_CREDENTIALS_ID = 'aws-credentials'
        TERRAFORM_DIR = 'terraform'
        TERRAFORM_BIN = '/usr/local/bin/terraform'
        KUBECTL_BIN = '/usr/local/bin/kubectl'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${params.DOCKER_IMAGE_TAG}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: ECR_CREDENTIALS_ID, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                            aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
                            aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
                            aws configure set region ${params.AWS_REGION}
                            
                            # Authenticate Docker to ECR
                            aws ecr get-login-password --region ${params.AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_IMAGE}
                            
                            # Push Docker image to ECR
                            docker push ${DOCKER_IMAGE}:${params.DOCKER_IMAGE_TAG}
                        '''
                    }
                }
            }
        }

        stage('Apply Terraform') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: AWS_CREDENTIALS_ID, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                            export AWS_DEFAULT_REGION=${params.AWS_REGION}
                            cd ${TERRAFORM_DIR}
                            ${TERRAFORM_BIN} init -backend-config="workspace=${params.TERRAFORM_WORKSPACE}"
                            ${TERRAFORM_BIN} plan -var="aws_region=${params.AWS_REGION}"
                            ${TERRAFORM_BIN} apply -auto-approve -var="aws_region=${params.AWS_REGION}"
                        '''
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    def kubeconfig = withCredentials([file(credentialsId: KUBECONFIG_CREDENTIALS_ID, variable: 'KUBECONFIG_FILE')]) {
                        readFile(KUBECONFIG_FILE)
                    }
                    writeFile(file: '/root/.kube/config', text: kubeconfig)

                    sh "${KUBECTL_BIN} apply -f k8s/deployment.yaml"
                    sh "${KUBECTL_BIN} apply -f k8s/service.yaml"
                }
            }
        }
    }

    triggers {
        pollSCM('H/5 * * * *')  // Polls for changes every 5 minutes
    }
}
