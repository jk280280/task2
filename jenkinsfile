pipeline {
    agent any

parameters {
        string(name: 'DOCKER_IMAGE_TAG', defaultValue: 'latest', description: 'Tag for Docker image')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS region for EKS and ECR')
        string(name: 'TERRAFORM_WORKSPACE', defaultValue: 'default', description: 'Terraform workspace name')
    }
    environment {
        DOCKER_IMAGE = "026090543905.dkr.ecr.${params.AWS_REGION}.amazonaws.com/flask-app"
        ECR_CREDENTIALS_ID = 'ecr-cred'
        KUBECONFIG_CREDENTIALS_ID = 'eks-kubeconfig'
        AWS_CREDENTIALS_ID = 'aws-cred'
        AWS_ECR_REGION = 'us-east-1'
        AWS_ECR_ACCOUNT_ID = '026090543905'
        IMAGE_REPO_NAME="flask-app"
        IMAGE_TAG="latest"
        REPOSITORY_URI = "026090543905.dkr.ecr.us-east-1.amazonaws.com"
        TERRAFORM_DIR = 'terraform'
        TERRAFORM_BIN = '/usr/local/bin/terraform'
        KUBECTL_BIN = '/usr/local/bin/kubectl'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Docker Build'){
            steps {
                script {
                    sh 'docker build --no-cache -t ${AWS_ECR_ACCOUNT_ID}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:latest -t ${AWS_ECR_ACCOUNT_ID}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:$BUILD_NUMBER .'
                }
            }    
        }
        stage('Push Docker Image') {
    steps {
        script {
            withCredentials([usernamePassword(credentialsId: 'ECR_CREDENTIALS_ID', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                sh '''
                    aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
                    aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
                    aws configure set region ${params.AWS_REGION}
                    
                    # Authenticate Docker to ECR
                    aws ecr get-login-password --region ${params.AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_IMAGE}
                    
                    # Push Docker image to ECR
                    docker push ${DOCKER_IMAGE}:${params.DOCKER_IMAGE_TAG}
                '''
            }
        }
    }
}


  stage('Terraform Apply') {
               steps {
                   script {
                       withEnv(["AWS_REGION=${params.AWS_REGION}"]) {
                           sh 'terraform init'
                           sh 'terraform apply -auto-approve'
                       }
                   }
               }
           }

              
        stage('Deploy to EKS') {
            steps {
                script {
                    def kubeconfig = withCredentials([file(credentialsId: KUBECONFIG_CREDENTIALS_ID, variable: 'KUBECONFIG_FILE')]) {
                        readFile(KUBECONFIG_FILE)
                    }
                    writeFile(file: '/root/.kube/config', text: kubeconfig)

                    sh "${KUBECTL_BIN} apply -f k8s/deployment.yaml"
                    sh "${KUBECTL_BIN} apply -f k8s/service.yaml"
                }
            }
        }
    }

    triggers {
        githubPush()
    }
}
